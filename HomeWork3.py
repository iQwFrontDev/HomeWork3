#Задача №1 Дана переменная, в которой хранится словарь, содержащий гео-метки для каждого пользователя (пример
# структуры данных приведен ниже). Вам необходимо написать программу,  которая выведет на экран множество уникальных гео-меток всех пользователей.

ids = {'user1': [213, 213, 213, 15, 213],
       'user2': [54, 54, 119, 119, 119],
       'user3': [213, 98, 98, 35]}
geo = []
for i in ids.values():
    geo.extend(i)
    geo_uniq = set(geo)
print(geo_uniq)

# Задача №2 Дана переменная, в которой хранится список поисковых запросов пользователя (пример структуры данных
# приведен ниже, но запросы потенциально могут быть любые). Вам необходимо написать  программу, которая выведет на экран распределение количества слов в запросах в требуемом виде.


queries = [
    'смотреть сериалы онлайн',
    'новости спорта',
    'афиша кино',
    'курс доллара',
    'сериалы этим летом',
    'курс по питону',
    'сериалы про спорт',
]

storage = {}

for query in queries:
# разбиваем строки в массиве на подмассивы
    words = query.split()
#Ключ рвен длинне подмассива, значение равно количеству раз сколько встречается в массиве
#Если ключ уже есть в словаре, то прибавляем к нему еденицу
    if len(words) in storage.keys():
        storage[len(words)] += 1
#Если ключ встречается впервые, то обнавляем словарь и добавляем новую пару
    else:
        storage.update({
            len(words): 1
        })
# В цикле создаем переменные для ключей и значений словаря storage, для расчета и вывода
for key, value in storage.items():
    percentage = round((value / len(queries)) * 100, 2)
    print(f'Поисковых запросов из {key} слова: {percentage}% ({value} запр.)')

# Задача №3 Дана переменная, в которой хранится информация о затратах и доходе рекламных кампаний по различным
# источникам. Необходимо дополнить  исходную структуру показателем ROI, который рассчитаем по формуле: ((revenue / cost) - 1) * 100


results = {
    'vk': {'revenue': 103, 'cost': 98},
    'yandex': {'revenue': 179, 'cost': 153},
    'facebook': {'revenue': 103, 'cost': 110},
    'adwords': {'revenue': 35, 'cost': 34},
    'twitter': {'revenue': 11, 'cost': 24},
}
# В цикле перебираем значения словаря тем самым  работая с вложенными словарями и присваиваем их переменной
# value
for value in results.values():
    #print (value)
# На каждой итерации высчитываем и добавляем новое значение во вложенный словарь, на вход подаются значения по ключу
# из переменой value
    value['ROI'] = ((value['revenue']/value['cost'] -1) *100)

print(results)

#Задача №4 Дана переменная, в которой хранится статистика рекламных каналов по объемам продаж (пример структуры
# данных приведен ниже).  Напишите программу, которая возвращает название канала с максимальным объемом продаж.

stats = {'facebook': 55,
         'yandex': 115,
         'vk': 120,
         'google': 99,
         'email': 42,
         'ok': 98}
max_key = max(stats, key=stats.get)

print(f'Максимальный объем продаж на рекламном канале:{max_key}')


# Задача №5 Дан список произвольной длины. Необходимо написать код, который на основе исходного  списка составит
# словарь такого уровня вложенности, какова длина исхондого списка.

my_list = ['2018-01-01', 'yandex', 'cpc', 100]
#Создаем начальную точку, к которой будем присваивать ключ
my_dict = my_list[-1]
#print(my_dict)
# На каждой итерации, переменной key будет присваиваться значение из списка с конца без хвоста
for key in reversed(my_list[:-1]):
    #print(key)
#На каждой итерации переменной my_dict будет присваиваться  ключ из переменной key и значение из переменной
# my_dict(своего рода счетчик), каждое последующее значение является результатом прошлой итарации
    my_dict = {key:my_dict}
print(my_dict)
